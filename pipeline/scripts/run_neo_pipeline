#!/bin/bash

# example command:
# ./pipeline/scripts/run_neo_pipeline /ref_data_dir/ /tools_dir/ /purple_dir/ /isofox_dir/ /lilac_dir/ /output_dir/ COLO829T COLO829_RNA COLO829_RNA.bam Skin V37 10 16

# required arguments
ref_data_dir=$1 && shift
tools_dir=$1 && shift
purple_dir=$1 && shift
isofox_dir=$1 && shift
lilac_dir=$1 && shift
output_dir=$1 && shift
sample_id=$1 && shift
rna_sample_id=$1 && shift
sample_rna_bam=$1 && shift
cancer_type=$1 && shift
ref_genome_version=$1 && shift
threads=$1 && shift
max_memory=$1 && shift

# input argument checks
if [[ ! -d "${ref_data_dir}" ]]; then
  echo "Missing reference data directory: ${ref_data_dir}"
  exit 1
fi

if [[ ! -d "${tools_dir}" ]]; then
  echo "Missing tools directory: ${tools_dir}"
  exit 1
fi

if [[ ! -d "${purple_dir}" ]]; then
  echo "Missing sample Purple directory: ${purple_dir}"
  exit 1
fi

if [[ ! -d "${isofox_dir}" ]]; then
  echo "Missing sample Isofox and RNA BAM directory: ${isofox_dir}"
  exit 1
fi

if [[ ! -d "${lilac_dir}" ]]; then
  echo "Missing sample Lilac directory: ${lilac_dir}"
  exit 1
fi

if [ "${max_memory}" == "" ]; then
  max_memory=16
fi

if [ "${threads}" == "" ]; then
  threads=8
fi

# sample_array=($(echo $sample_data | tr "," " "))
# sample_id=${sample_array[0]}
# cancer_type=${sample_array[1]}


echo "Running HMF neoepitope pipeline for ${sample_id}, RNA sample ${rna_sample_id}"

echo "Configuration:"
echo "  reference data dir: ${ref_data_dir}"
echo "  tools dir: ${tools_dir}"
echo "  ref genome version: ${ref_genome_version}"
echo "  Purple dir: ${purple_dir}"
echo "  Isofox dir: ${isofox_dir}"
echo "  Lilac dir: ${lilac_dir}"
echo "  output dir: ${output_dir}"
echo "  threads: ${threads}"
echo "  memory: ${max_memory}"


# check required inputs

purple_somatic_vcf=${purple_dir}/${sample_id}.purple.somatic.vcf.gz
purple_sv_vcf=${purple_dir}/${sample_id}.purple.sv.vcf.gz
isofox_transcript_data=${isofox_dir}/${rna_sample_id}.isf.transcript_data.csv
lilac_coverage=${lilac_dir}/${sample_id}.lilac.tsv

if [[ ! -f "${purple_somatic_vcf}" ]]; then
  echo "Missing Purple somatic VCF, exiting"
  exit
fi

if [[ ! -f "${purple_sv_vcf}" ]]; then
  echo "Missing Purple SV VCF, exiting"
  exit
fi

if [[ ! -f "${isofox_transcript_data}" ]]; then
  echo "Missing Isofox transcript expression: ${isofox_transcript_data}, exiting"
  exit
fi

if [[ ! -f "${lilac_coverage}" ]]; then
  echo "Missing Lilac allele coverage: ${lilac_coverage}, exiting"
  exit
fi


# set resource files
ensembl_dir=${ref_data_dir}/common/ensembl_data/
known_fusion_file=${ref_data_dir}/common/known_fusion_data.csv

binding_dir=${ref_data_dir}/binding

cohort_tpm_medians=${ref_data_dir}/tpm_cohort/hmf_tpm_medians.csv

if [ "${ref_genome_version}" == "V37" ]; then
  echo "Reference genome version GRCh37"

  # Reference genome
  ref_genome=${ref_data_dir}/ref_genome/Homo_sapiens.GRCh37.GATK.illumina.fasta

else
  echo "Reference genome version GRCh38"

  ref_genome=${ref_data_dir}/ref_genome/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna
fi

# set tool links
neo_jar=${tools_dir}/neo.jar
linx_jar=${tools_dir}/linx.jar
isofox_jar=${tools_dir}/isofox.jar
sage_jar=${tools_dir}/sage.jar


if [[ ! -d "${output_dir}" ]]; then
  mkdir ${output_dir}
fi


# Run Linx to create neoepitope gene fusions

args="-sample ${sample_id} \
  -sv_vcf ${purple_sv_vcf} \
  -purple_dir ${purple_dir} \
  -ref_genome_version ${ref_genome_version} \
  -ensembl_data_dir ${ensembl_dir} \
  -known_fusion_file ${known_fusion_file} \
  -write_neo_epitopes \
  -no_vis_files \
  -output_dir ${output_dir}"

echo "Running Linx neoepitopes with args: ${args}"

java -jar ${linx_jar} ${args}


# Run Neo to find neoepitopes

linx_neo_tsv=${output_dir}/${sample_id}.linx.neoepitope.tsv

if [[ ! -f "${linx_neo_tsv}" ]]; then
  echo "Failed to run Linx, exiting"
  exit
fi

args="-sample ${sample_id} \
    -linx_dir ${output_dir} \
    -somatic_vcf ${purple_somatic_vcf} \
    -ref_genome ${ref_genome} \
    -ref_genome_version ${ref_genome_version} \
    -ensembl_data_dir ${ensembl_dir} \
    -output_dir ${output_dir} \
    -log_debug"

echo "Running Neo-Finder with args: ${args}"

java -jar ${neo_jar} ${args}


# Run Isofox to annotate fusions with RNA

neo_data_tsv=${output_dir}/${sample_id}.neo.neo_data.tsv

if [[ ! -f "${neo_data_tsv}" ]]; then
  echo "Failed to run Neo-Finder, exiting"
  exit
fi

args="-sample ${sample_id} \
    -functions NEO_EPITOPES \
    -neo_dir ${output_dir} \
    -bam_file ${sample_rna_bam} \
    -ref_genome ${ref_genome} \
    -ref_genome_version ${ref_genome_version} \
    -ensembl_data_dir ${ensembl_dir} \
    -output_dir ${isofox_dir} \
    -log_debug"

echo "Running Isofox RNA fusion annotation with args: ${args}"

java -jar ${isofox_jar} ${args}


isofox_neo_tsv=${isofox_dir}/${sample_id}.isf.neoepitope.tsv

if [[ ! -f "${isofox_neo_tsv}" ]]; then
  echo "Failed to run Isofox, exiting"
  exit
fi


# Run Sage RNA Append if it hasn't already been run

sage_rna_vcf=${output_dir}/${sample_id}.purple.somatic.rna.vcf.gz

if [[ -f "${sage_rna_vcf}" ]]; then
  echo "Skipping Sage Append RNA since ${sage_rna_vcf} exists"

else

  args="-reference ${rna_sample_id} \
    -reference_bam ${sample_rna_bam} \
    -input_vcf ${purple_somatic_vcf} \
    -ref_genome ${ref_genome} \
    -ref_genome_version ${ref_genome_version} \
    -max_read_depth 100000 \
    -output_vcf ${sage_rna_vcf} \
    -threads ${threads} \
    -log_debug"

  # -sync_fragments currently disabled

  echo "Sage RNA Append with args: ${args}"

  java -cp ${sage_jar} com.hartwig.hmftools.sage.append.SageAppendApplication ${args}

fi

if [[ ! -f "${sage_rna_vcf}" ]]; then
  echo "Failed to run Sage, exiting"
  exit
fi


# Finally Neo-Scorer

args="-sample ${sample_id} \
    -rna_sample ${rna_sample_id} \
    -cancer_type ${cancer_type} \
    -neo_dir ${output_dir} \
    -isofox_dir ${isofox_dir} \
    -lilac_dir ${lilac_dir} \
    -purple_dir ${purple_dir} \
    -rna_somatic_vcf ${sage_rna_vcf} \
    -ensembl_data_dir ${ensembl_dir} \
    -score_file_dir ${binding_dir} \
    -cancer_tpm_medians_file ${cohort_tpm_medians} \
    -rank_threshold 0 \
    -write_types ALLELE_PEPTIDE;NEOEPITOPE \
    -output_dir ${output_dir} \
    -log_debug"


echo "Running Neo-Scorer with args: ${args}"

java -cp ${neo_jar} com.hartwig.hmftools.neo.score.NeoScorer ${args}


echo "Neo pipeline complete"

